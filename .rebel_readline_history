1608663451513:(doc set)
1608663455409:(doc set!)
1608679654167:(. js/window -width)
1608679662053:(. js/window width)
1608679671176:(. js/window innderWidth)
1608679677959:(. js/window -innerWidth)
1608679723916:(. js/window -innerHeight)
1608680332110:(js/Math.PI)
1608680335251:js/Math.PI
1608680361428:2pi
1608680372928:(in-ns 'cljs-personal-web.draw)
1608680374493:2pi
1608680381567:(def 2pi (* 2 js/Math.PI))
1608680387094:2pi
1608680635977:(.getContext (.getElementById js/document "myCanvas") "2d")
1608680658172:(let [[rgba _ _ _] (.getContext (.getElementById js/document "myCanvas") "2d")] rgba)
1608680701598:(let [{:keys [color pos size]} (.getContext (.getElementById js/document "myCanvas") "2d")] rgba)
1608680710396:(let [{:keys [color pos size]} (.getContext (.getElementById js/document "myCanvas") "2d")] color)
1608680716421:(let [{:keys [color pos size]} (.getContext (.getElementById js/document "myCanvas") "2d")] pos\n     )
1608680724830:(let [{:keys [color pos size]} (.getContext (.getElementById js/document "myCanvas") "2d")] size)
1609085566222:(js/Array.from "asdfqwer")
1609085579045:(js->clj (js/Array.from "asdfqwer"))
1609085620432:(clj->js [1 2 3 4 5 6])
1609873024341:(require 'ol)
1609873721196:()
1609882323797:(def chain-length\n     (memoize\n      (fn [n]\n        (cond\n         (== n 1)  1\n         (even? n) (inc (chain-length (/ n 2)))\n         :else     (inc (chain-length (inc (* 3 n))))))))
1609882330781:(type chain-length)
1609882460552:(defn fib [n]\n  (print ".")\n  (if (>= 1 n)\n    n\n    (+ (fib (- n 1)) (fib (- n 2)))))
1609882476145:(def mem-fib (memoize fib))
1609882481870:(mem-fib 5)
1609882490832:(time (mem-fib 6))
1609882495638:(time (mem-fib 60))
1609882511429:(time (mem-fib 16))
1609882891412:(time (mem-fib 10))
1609882898125:(time (mem-fib 16))
1609900188777:()
1609976845534:(-> "reagent-forms.css" clojure.java.io/resource slurp)
1609982533002:()
1609982602355:(def asdf (atom {:key "asdf"}))
1609982604051:asdf
1609982608001:@asdf
1609982615243:(swap! asdf :key "test")
1609982618225:@asdf
1609982659064:(assoc asdf :key "test")
1609982663068:asdf
1609982665034:@asdf
1609982670303:(def asdf (atom {:key "asdf"}))
1609982672699:@asdf
1609982684968:(assoc! @adsf {:key "test"})
1609982690858:(assoc! @asdf {:key "test"})
1609982698068:(assoc! @asdf :key "test")
1609982701680:(assoc! asdf :key "test")
1609982947919:(swap! asdf :key "test")
1609982957415:@asdf
1609982968033:(assoc asdf :key "test")
1609982976769:(assoc {} :key "test")
1609982986824:(assoc (assoc {} :key "test") :key "asdf")
1609982990581:(assoc (assoc {} :key "test") :ky "asdf")
1609983005554:asdf
1609983007387:@asdf
1609983020323:(def asdf (atom {:key "asdf"}))
1609983021361:asdf
1609983022702:@asdf
1609983050700:(set! asdf (assoc @asdf {:key "test"}))
1609983079349:(assoc @asdf {:key "test"})
1609983088332:(assoc @asdf :key "test")
1609983095851:@asdf
1609983099698:asdf
1609983101912:@adsf
1609983103814:@adf
1609983106049:()
1609983107682:asdf
1609983119204:(def asdf {:key "asdf"})
1609983120707:asdf
1609983132590:(assoc asdf :key "test")
1609983143292:(def asdf (atom {:key "asdf"}))
1609983145135:asdf
1609983146186:@asdf
1609983154895:(assoc asdf :key "test")
1609983156889:asdf
1609983161121:@asdf
1609984140601:(def asdf {:map "asdf"})
1609984150867:(swap! asdf assoc :map "test")
1609984238399:asdf
1609984240332:@asdf
1609984255518:(def asdf (atom {:key "asdf"}))
1609984256939:@asdf
1609984267592:(swap! asdf assoc :key "test")
1609984269434:@asdf
1609984282044:(swap! asdf assoc :key "testing" :val "test2")
1609986193344:validation
1609986264683:(in-ns 'cljs-personal-web.password-manager)
1609986266245:validation
1609986274612:adsf
1609986275282:asdf
1609986295850:(def asdf (atom {:error nil :username "" :password ""}))
1609986296417:asdf
1609986300092:(validation asdf)
1609986347969:(swap! asdf assoc :error "1")
1609986356300:@asdf
1609986374549:(type (swap! asdf assoc :error "1"))
1609986465901:asdf
1609986469688:(def asdf (atom {:error nil :username "" :password ""}))
1609986470748:asdf
1609986471677:@sdf
1609986474353:@asdf
1609986485028:(validation asdf)
1609986503374:asdf
1609986512575:(swap! asdf assoc :error "1")
1609986519593:asdf
1609986520767:@asdf
1609986534743:(swap! asdf assoc :error "1")
1609986539958:(swap! asdf assoc :error "0")
1609986541745:@asdf
1609986571600:asdf
1609986574328:@asdf
1609986580485:(def asdf (atom {:error nil :username "" :password ""}))
1609986582862:(validation asdf)
1609986692643:(if "" 1 0)
1609986701696:(if (empty? "") 1 0)
1609986711858:(if 0 1 0)
1609986714640:(if nil 1 0)
1609986930866:@asdf
1609986934439:(def asdf (atom {:error nil :username "" :password ""}))
1609986935674:@asdf
1609986938231:(def asdf (atom {:error nil :username "" :password ""}))
1609986954864:(in-ns 'user.core)
1609986957812:(def asdf (atom {:error nil :username "" :password ""}))
1609986958627:asdf
1609986959707:@asdf
1609986961976:(type @asdf)
1609986971152:(assoc (type @asdf) :test "zxcv")
1609986986393:(assoc @asdf :test "zxcv")
1609986988426:@asdf
1609987039665:(in-ns 'cljs-personal-web.password-manager)
1609987046994:(def asdf (atom {:error nil :username "" :password ""}))
1609987049394:asdf
1609987050674:@asdf
1609987056670:(def asdf (atom {:error nil :username "" :password ""}))
1609987117993:(let [asdf "asdf"] (cond true asdf false "zxcv"))
1609987131040:(let [asdf "asdf"] (cond true asdf true "zxcv"))
1609987156973:(let [asdf "asdf"] (cond false asdf true "zxcv" :else "wqsdfer"))
1609987162448:(let [asdf "asdf"] (cond false asdf false "zxcv" :else "wqsdfer"))
1610246047265:(doc rand-int)
1610247378272:(in-ns 'cljs-personal-web.db)
1610247383458:(get-user!)
1610247392551:(js->clj (get-user!))
1610249692518:(get-user!)
1610249702316:(type (get-user!))
1610249708555:((get-user!))
1610249821205:(get-user!)
1610250156009:(js->clj (get-user!))
1610250164123:(type (get-user!))
1610250197625:(:username (get-user!))
1610250214910:(js/obj-get (get-user!) :username)
1610250237887:(js->cljs (get-user!))
1610250258179:(cljs.core/js->cljs (get-user!))
1610250309566:(:all-pieces (get-user!))
1610250435927:(swap! (atom) assoc :username (get-user!))
1610250442502:(swap! (atom {}) assoc :username (get-user!))
1610250602753:(get-user!)
1610250619414:(type (get-user!))
1611600784742:(re-matches #"^[a-zA-Z]{8}$" "Avogadro6.02")
1611600792279:(re-matches #"^[a-zA-Z]{8,20}$" "Avogadro6.02")
1611600794735:(re-matches #"^[a-zA-Z]{8,20}$" "Avogadro602")
1611600801281:(re-matches #"^[a-zA-Z]{8,20}$" "Avogadro")
1611600820856:(re-matches #"^[a-zA-Z0-9.]{8,20}$" "Avogadro6.02")
1611600868404:(re-matches #"^[a-zA-Z0-9.!@#]{8,20}$" "Avogadro6.02!")
1611600880861:(re-matches #"^[a-zA-Z0-9.!@#%^&*]{8,20}$" "Avogadro6.02!")
1618632315196:(conj 1 '(2))
1618632318729:d
1618632327303:(conj 1 '(2))
1618632335989:(doc conj)
1618632347437:(conj '(2) 1)
1618632358399:(conj (conj '(2) 1) 0)
1619145216752:()
1619148795348:(def oo (r/atom {:link-view nil\n                       :episodes nil\n                       :titles [{:link "http://encountersthepodcast.libsyn.com/rss" :name "Encounters Pod"}\n                                {:link "https://randomhorror9.libsyn.com/rss" :name "Random Number Generator Horror Podcast No.9"}]}))
1619148817668:(def oo (reagent.core/atom {:link-view nil\n                       :episodes nil\n                       :titles [{:link "http://encountersthepodcast.libsyn.com/rss" :name "Encounters Pod"}\n                                {:link "https://randomhorror9.libsyn.com/rss" :name "Random Number Generator Horror Podcast No.9"}]}))
1619148819825:oo
1619148830026:(:titles @oo)
1619148852307:(first (:titles @oo))
1619148863666:(:link (first (:titles @oo)))
1619148868026:(first (first (:titles @oo)))
1619148912866:(def df (fn [x] x))
1619148933028:(apply df (:link (first (:titles @oo))))
1619148946064:(:link (first (:titles @oo)))
1619148957386:(apply df (:link (first (:titles @oo))))
1619148967827:(df (:link (first (:titles @oo))))
1619187748234:a
1619187752154:(def a "asdf")
1619187763990:a
1619486969809:()
1620419842564:(def asdf "asdf')\n")
1620419844128:asdf
1620495176392:()
1620495181655:clojure.lang.LazySeq
1620495193411:(= clojure.lang.LazySeq (type '())\n   )
1620495198154:(= clojure.lang.LazySeq (type '()))
1620495227578:(type [])
1620495243880:(type '())
1620495246987:(type '(1 ))
1620495253922:(type '(1))
1620495265922:(type '[])
1620495340937:(type {})
1620500730328:()
1621187499465:(doc into)
1621189564450:()
1621304894067:js/HTMLMediaElement
1621304904345:(.currentTime js/HTMLMediaElement)
1621304979993:js/HTMLMediaElement.audiotracks
1621304993327:(js/HTMLMediaElement.currentTime)
1621305723010:(.getElementById js/document "pause")
1621305740078:(js/getElementById js/document "pause")
1621305748907:(.getElementById js/document "pause")
1621305777133:(.getElementById js/document "player")
1621306280007:(.getMetadata (.getElementById js/document "player"))
1621306287987:(.mozGetMetadata (.getElementById js/document "player"))
1621306588338:(.paused (.getElementById js/document "player"))
1621306599647:(.getElementById js/document "player")
1621306609368:(.paused (.getElementById js/document "player"))
1621306612687:(.-paused (.getElementById js/document "player"))
1621309139494:()
1621364119040:(.-paused (.getElementById js/document "player"))
1621364123735:(.getElementById js/document "player")
1622222889992:()
1622222892738:js/document
1622222910407:(.getElementByid js/document "overlay")
1622222919993:(.getElementById js/document "overlay")
1622222959784:(-> js/document (.getElementById "overlay") (.. -style))
1622222966741:(-> js/document (.getElementById "overlay") (.. -style -display))
1622222973431:(set! (-> js/document (.getElementById "overlay") (.. -style -display)) "none")
1622222977220:(set! (-> js/document (.getElementById "overlay") (.. -style -display)) "block")
1622223309966:(js/document.getElementByid "overlay")
1622223313507:js/document
1622223323343:(.getElementById js/document "overlay")
1622223541944:(set! (-> js/document (.getElementById "overlay") (.. -style -display)) "block")
1622223892037:(.. (.getElementById js/document "overlay") .-style .-display)
1622223920896:(.. (.getElementById js/document "overlay") .-style)
1622223928455:(.getElementById js/document "overlay")
1622223937073:(.-style (.getElementById js/document "overlay"))
1622223945354:(.-display (.-style (.getElementById js/document "overlay")))
1622223961023:(set! (.-display (.-style (.getElementById js/document "overlay"))) "none")
1622223969121:(set! (.-display (.-style (.getElementById js/document "overlay"))) "block")
1622229126030:(set! (.-display (.-style (.getElementById js/document "overlay"))) "none")
1622229129562:(set! (.-display (.-style (.getElementById js/document "overlay"))) "block")
1622229403921:(set! (.-display (.-style (.getElementById js/document "overlay"))) "none")
1622229405696:(set! (.-display (.-style (.getElementById js/document "overlay"))) "block")
